// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–∞–≤—ã—á–µ–∫
let quoteType = "'";

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏
document.getElementById('single-quote-btn').addEventListener('click', () => {
    document.getElementById('single-quote-btn').classList.add('active');
    document.getElementById('double-quote-btn').classList.remove('active');
    quoteType = "'";
});

document.getElementById('double-quote-btn').addEventListener('click', () => {
    document.getElementById('double-quote-btn').classList.add('active');
    document.getElementById('single-quote-btn').classList.remove('active');
    quoteType = '"';
});

function addQuotes() {
    const input = document.getElementById('inputQuotes').value.trim();
    if (!input) {
        document.getElementById('outputQuotes').value = '';
        return;
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—á–∏—â–∞–µ–º –∫–∞–∂–¥—É—é
    const lines = input.split('\n');
    const items = [];
    lines.forEach(line => {
        const words = line.split(/\s+/).filter(word => word.length > 0);
        items.push(...words);
    });

    let result = '';

    if (quoteType === '"') {
        // –î–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ ‚Äî –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        result = items.map(item => `"${item}"`).join(',\n');
    } else {
        // –û–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ ‚Äî –≤—Å–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        result = items.map(item => `'${item}'`).join(',');
    }

    document.getElementById('outputQuotes').value = result;
}

function extractNumbers() {
    const input = document.getElementById('inputNumbers').value;
    if (!input) {
        document.getElementById('outputNumbers').value = '';
        return;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–∏—Ñ—Ä
    const numbers = input.match(/\d+/g) || [];
    const uniqueNumbers = [...new Set(numbers)]; // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const result = uniqueNumbers.map(num => `'${num}'`).join(',');

    document.getElementById('outputNumbers').value = result;
}

function addQuotes() {
    const input = document.getElementById('inputQuotes').value.trim();
    const output = document.getElementById('outputQuotes');
    const button = event.target; // –∫–Ω–æ–ø–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∫–ª–∏–∫–Ω—É–ª–∏

    if (!input) {
        output.value = '';
        return;
    }

    const lines = input.split('\n');
    const items = [];
    lines.forEach(line => {
        const words = line.split(/\s+/).filter(word => word.length > 0);
        items.push(...words);
    });

    let result = '';

    if (quoteType === '"') {
        result = items.map(item => `"${item}"`).join(',\n');
    } else {
        result = items.map(item => `'${item}'`).join(',');
    }

    output.value = result;

    // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä
    copyTextToClipboard(result);

    // –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
    showCopiedFeedback(button);
}

function extractNumbers() {
    const input = document.getElementById('inputNumbers').value;
    const output = document.getElementById('outputNumbers');
    const button = event.target;

    if (!input) {
        output.value = '';
        return;
    }

    const numbers = input.match(/\d+/g) || [];
    const uniqueNumbers = [...new Set(numbers)];
    const result = uniqueNumbers.map(num => `'${num}'`).join(',');

    output.value = result;

    // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä
    copyTextToClipboard(result);

    // –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
    showCopiedFeedback(button);
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî —Ç–∏—Ö–æ –∏ –ø—Ä–æ—Å—Ç–æ
function copyTextToClipboard(text) {
    if (!text.trim()) return;
    const temp = document.createElement('textarea');
    temp.value = text;
    document.body.appendChild(temp);
    temp.select();
    document.execCommand('copy');
    document.body.removeChild(temp);
}

// –≠—Ñ—Ñ–µ–∫—Ç "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ" –Ω–∞ –∫–Ω–æ–ø–∫–µ
function showCopiedFeedback(button) {
    const originalText = button.innerText;
    button.innerText = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ üëå';
    button.disabled = true; // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–∏–µ
    button.style.opacity = '0.7';

    setTimeout(() => {
        button.innerText = originalText;
        button.disabled = false;
        button.style.opacity = '1';
    }, 500); // 1.5 —Å–µ–∫—É–Ω–¥—ã
}
